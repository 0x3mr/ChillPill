@tailwind base;
@tailwind components;
@tailwind utilities;

/* Define color variables for theming */
:root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;
}

/* Adjust color variables for dark theme */
@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 0, 0, 0;
    --background-end-rgb: 39, 39, 39;
  }
}

/* Set default body styles */
body {
  color: rgb(var(--foreground-rgb));
  background: rgb(104,24,70);
  background: linear-gradient(111deg, rgba(104,24,70,1) 1%, rgba(11,0,26,1) 34%, rgba(61,1,80,1) 100%);
}

/* Define custom text utility class */
@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}


To make your project suitable for showcasing on GitHub as a portfolio project, it's important to organize and comment your code effectively, provide clear documentation, and ensure all dependencies and build instructions are included. Here’s a step-by-step guide on how to prepare your project for GitHub:

Project Structure: Organize your project files in a clear structure.
README.md: Write a comprehensive README file to explain your project.
Comments and Documentation: Add comments to your code for clarity.
Dependencies: Ensure all dependencies are listed in package.json.
Build and Start Scripts: Include scripts for building and running the project.
.gitignore: Use a .gitignore file to exclude unnecessary files from the repository.
Here’s how you can structure your project:

arduino
Copy code
my-portfolio-project/
├── public/
│   ├── icons/
│   │   ├── cloud_rain.svg
│   │   ├── cloud.svg
│   │   ├── ...
│   └── index.html
├── src/
│   ├── components/
│   │   └── Button.tsx
│   ├── App.tsx
│   ├── index.tsx
│   └── global.css
├── .gitignore
├── package.json
├── README.md
├── tsconfig.json
└── tailwind.config.js
1. README.md
Create a README.md file with detailed information about your project:

markdown
Copy code
# My Portfolio Project

## Overview
This project showcases a customizable button component in a React application, using Tailwind CSS for styling and TypeScript for type safety.

## Features
- Customizable button with dynamic icons
- Responsive design with Tailwind CSS
- Dark mode support

## Installation
1. Clone the repository:
   ```bash
   git clone https://github.com/yourusername/my-portfolio-project.git
   cd my-portfolio-project
Install dependencies:
bash
Copy code
npm install
Usage
To start the development server:

bash
Copy code
npm start
To build the project:

bash
Copy code
npm run build
File Structure
public/: Contains static assets like icons.
src/: Contains the source code.
components/: Contains reusable components.
global.css: Tailwind CSS configuration.
App.tsx: Main application component.
index.tsx: Entry point of the application.
License
This project is licensed under the MIT License.

php
Copy code

### 2. **Code Comments and Documentation**

#### Button Component (`src/components/Button.tsx`)
Add comments to your Button component for better understanding:

```tsx
import React, { ReactNode } from 'react';
import Cloud_rain from '../icons/cloud_rain.svg';
import Sound_ico from '../icons/cloud_rain.svg';
import Cloud from '../icons/cloud.svg';
import trees from '../icons/trees.svg';
import water from '../icons/water_ocean.svg';
import fan from '../icons/fan.svg';
import fire from '../icons/fire.svg';
import night from '../icons/night.svg';
import music_note from '../icons/music_note.svg';
import street from '../icons/street.svg';
import bell from '../icons/bell.svg';
import day from '../icons/day.svg';
import noise from '../icons/noise.svg';
import thunder from '../icons/thunder.svg';
import bird from '../icons/bird.svg';
import owl from '../icons/owl.svg';
import train from '../icons/train.svg';
import cafe from '../icons/cafe.svg';
import piano from '../icons/piano.svg';
import car from '../icons/car.svg';
import flute from '../icons/flute.svg';
import random from '../icons/random.svg';
import tv from '../icons/tv.svg';
import cat from '../icons/cat.svg';
import forest from '../icons/forest.svg';
import river from '../icons/river.svg';
import clapping from '../icons/clapping.svg';
import frog from '../icons/frog.svg';
import sea from '../icons/sea.svg';
import wind from '../icons/wind.svg';
import clock from '../icons/clock.svg';
import music from '../icons/music.svg';
import snow from '../icons/snow.svg';
import xylophone from '../icons/xylophone.svg';

interface ButtonProps {
  children: ReactNode;
  className?: string;
  icc?: string;
  isActive?: boolean;
  onClick?: () => void;
}

// Mapping icon keys to SVG file imports
const ico_map: { [key: string]: string } = {
  random: random,
  sound: Sound_ico,
  clouds: Cloud,
  rain: Cloud_rain,
  trees: trees,
  water: water,
  fan: fan,
  ocean: water,
  fire: fire,
  night: night,
  twink: music_note,
  noise: noise,
  day: day,
  kitty: cat,
  sand: Sound_ico, // TODO: Update placeholder icon
  forest: forest,
  xylophone: xylophone,
  thunder: thunder,
  cermony: Sound_ico, // TODO: Update placeholder icon
  cars: car,
  tv: tv,
  piano: piano,
  owl: owl,
  sea: sea,
  train: train,
  music: music,
  flute: flute,
  street: street,
  river: river,
  ding: bell,
  cafe: cafe,
  birds: bird,
  clock: clock,
  frog: frog,
  wind: wind,
  clap: clapping,
  snow: snow,
  vaccum: Sound_ico, // TODO: Update placeholder icon
};

// Button component definition
const Button = ({ icc, children, className, onClick, isActive, ...props }: ButtonProps) => {
  return (
    <div className={`flex flex-col items-center justify-center gap-2 ${className}`}>
      <button
        className={`
          flex items-center justify-center px-4 py-2 bg-[#B8C37E]
          button ${isActive ? 'active' : 'inactive'}  text-white font-bold shadow-md hover:bg-[#9AAE6C]
        `}
        style={{
          borderRadius: '15px',
          width: 230,
          height: 60,
          marginTop: 30,
        }}
        onClick={onClick}
        {...props}
      >
        <img src={ico_map[icc!] || ico_map['sound']} alt={icc} />
      </button>
      <p className="text-center text-white">{children}</p>
    </div>
  );
};

export default Button;
Global CSS (src/global.css)
Ensure your CSS is well-documented and clear:

css
Copy code
/* Importing Tailwind CSS base, components, and utilities */
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Define color variables for light and dark themes */
:root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;
}

/* Adjust color variables for dark theme */
@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 0, 0, 0;
    --background-end-rgb: 39, 39, 39;
  }
}

/* Set default body styles */
body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(111deg, rgba(104,24,70,1) 1%, rgba(11,0,26,1) 34%, rgba(61,1,80,1) 100%);
}

/* Define custom text utility class */
@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

/* Styles for active and inactive buttons */
.button.active {
  box-shadow:  inset 2px 2px 5px #292b1c, inset -5px -2px 10px #636948;
  background-color: #636948;
}

.button.inactive {
  box-shadow: 0px 0px 20px 4px #636948;   
}

/* Floating animation for logo */
.logo{
  animation-name: floating !important;
  animation-duration: 3s !important;
  animation-iteration-count: infinite !important;
  animation-timing-function: ease-in-out !important;
  padding: 50px;
  margin-top: 75px;
  margin-bottom: 75px;
}

@keyframes floating {
  from {
    transform: translate(0, 0px);
  }
  65% {
    transform: translate(0, 15px);
  }
  to {
    transform: translate(0, 0px);
  }
}

/* Adds 6rem (96px) of padding to the bottom of an element to create additional space and improve overall layout view*/
.Bottompaddin {
  padding-bottom: 6rem;
}
